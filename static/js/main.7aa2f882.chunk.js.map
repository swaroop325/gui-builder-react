{"version":3,"sources":["toolbar.js","formBuilder.js","App.js","generatedForm.js","Form.js","serviceWorker.js","index.js"],"names":["Toolbar","state","redirect","generateForm","setState","this","to","localStorage","clear","props","clearForm","showPreview","className","style","marginRight","onClick","bind","deleteForm","React","Component","GUIBuilder","onPost","data","setItem","JSON","stringify","flushed","getItem","parse","formData","task_data","App","FormGenerated","reloaded","update","_onChange","ElementStore","subscribe","read_only","hide_actions","Form","key","type","bg","Boolean","window","location","hostname","match","routing","exact","path","component","Gui","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAEqBA,E,2MACjBC,MAAQ,CACJC,UAAU,G,EAEdC,aAAe,WACX,EAAKC,SAAS,CACVF,UAAU,K,6EAId,GAAIG,KAAKJ,MAAMC,SACX,OAAO,kBAAC,IAAD,CAAUI,GAAG,Y,mCAIxBC,aAAaC,QACbH,KAAKI,MAAMC,c,+BAGX,OAAQ,6BACHL,KAAKM,cACN,wBAAIC,UAAU,WAAd,mBACA,yBAAKA,UAAU,WACX,4BAAQA,UAAU,0BAA0BC,MAAO,CAAEC,YAAa,QAAUC,QAASV,KAAKF,aAAaa,KAAKX,OAA5G,iBACA,4BAAQO,UAAU,0BAA0BC,MAAO,CAAEC,YAAa,QAAUC,QAASV,KAAKY,WAAWD,KAAKX,OAA1G,oB,GAxBqBa,IAAMC,WCsC5BC,E,YAlCX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KAcVY,OAAS,SAACC,GACNf,aAAagB,QAAQ,WAAYC,KAAKC,UAAUH,KAdhD,EAAKrB,MAAQ,CAAEqB,KAAM,GAAII,SAAS,GAClC,EAAKhB,UAAY,EAAKA,UAAUM,KAAf,gBAHF,E,iFAMXT,aAAaoB,QAAQ,YACrBtB,KAAKD,SAAS,CAAEkB,KAAME,KAAKI,MAAMrB,aAAaoB,QAAQ,eAEtDtB,KAAKD,SAAS,CAAEkB,KAAM,O,kCAI1BjB,KAAKD,SAAS,CAAEsB,SAAUrB,KAAKJ,MAAMyB,Y,+BAMrC,IAAIG,EAAWxB,KAAKJ,MAAMqB,KAAKQ,UAAYzB,KAAKJ,MAAMqB,KAAKQ,UAAY,GACvE,OAAQ,yBAAKlB,UAAU,QACnB,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAASF,UAAWL,KAAKK,UAAWY,KAAMjB,KAAKJ,MAAMqB,QAEzD,yBAAKV,UAAU,eACX,kBAAC,mBAAD,CACIU,KAAMO,EACNR,OAAQhB,KAAKgB,e,GA5BRH,IAAMC,WCOhBY,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,Q,SCJeoB,E,YACjB,WAAYvB,GAAQ,IAAD,uBACf,4CAAMA,KACDR,MAAQ,CAAEqB,KAAM,GAAIW,UAAU,GAEnC,IAAMC,EAAS,EAAKC,UAAUnB,KAAf,gBAJA,OAKfoB,eAAaC,WAAU,SAAApC,GAAK,OAAIiC,EAAOjC,EAAMqB,SAL9B,E,iFAQXf,aAAaoB,QAAQ,YACrBtB,KAAKD,SAAS,CAAEkB,KAAME,KAAKI,MAAMrB,aAAaoB,QAAQ,eAEtDtB,KAAKD,SAAS,CAAEkB,KAAM,O,gCAGpBA,GACNjB,KAAKD,SAAS,CACVkB,KAAMA,M,+BAIV,IAAIO,EAAWxB,KAAKJ,MAAMqB,KAAKQ,UAAYzB,KAAKJ,MAAMqB,KAAKQ,UAAY,GACvE,OACI,yBAAKlB,UAAU,iBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,iBACX,kBAAC,qBAAD,CACI0B,WAAW,EACXC,cAAc,EACdjB,KAAMO,W,GA7BSX,IAAMC,WCWlCqB,MATf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAe6B,IAAI,SACnB,kBAAC,IAAD,CAAaC,KAAK,WAAWC,IAAI,M,SCGnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAMC,EACF,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,QAAQC,UAAWC,MAI3CC,IAASC,OAAON,EAASO,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7aa2f882.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nexport default class Toolbar extends React.Component {\n    state = {\n        redirect: false\n    }\n    generateForm = () => {\n        this.setState({\n            redirect: true\n        })\n    }\n    showPreview() {\n        if (this.state.redirect) {\n            return <Redirect to='/form' />\n        }\n    }\n    deleteForm() {\n        localStorage.clear();\n        this.props.clearForm();\n    }\n    render() {\n        return (<div>\n            {this.showPreview()}\n            <h4 className=\"heading\">MSD GUI BUILDER</h4>\n            <div className=\"buttons\">\n                <button className=\"btn btn-primary formBtn\" style={{ marginRight: '10px' }} onClick={this.generateForm.bind(this)}>Generate Form</button>\n                <button className=\"btn btn-primary formBtn\" style={{ marginRight: '10px' }} onClick={this.deleteForm.bind(this)}>Clear Form</button>\n            </div>\n        </div>\n        );\n    }\n}\n","\nimport React from 'react'\nimport { ReactFormBuilder } from 'react-form-builder2';\nimport Toolbar from './toolbar'\n\nclass GUIBuilder extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { data: [], flushed: true };\n        this.clearForm = this.clearForm.bind(this);\n    }\n    componentDidMount() {\n        if (localStorage.getItem(\"formData\")) {\n            this.setState({ data: JSON.parse(localStorage.getItem(\"formData\")) });\n        } else {\n            this.setState({ data: [] });\n        }\n    }\n    clearForm() {\n        this.setState({ flushed: !this.state.flushed });\n    }\n    onPost = (data) => {\n        localStorage.setItem(\"formData\", JSON.stringify(data))\n    }\n    render() {\n        var formData = this.state.data.task_data ? this.state.data.task_data : [];\n        return (<div className=\"page\">\n            <div className=\"toolbar\">\n                <Toolbar clearForm={this.clearForm} data={this.state.data} />\n            </div>\n            <div className=\"gui-builder\">\n                <ReactFormBuilder\n                    data={formData}\n                    onPost={this.onPost} />\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default GUIBuilder;","import React from 'react';\nimport './App.css';\nimport GUIBuilder from './formBuilder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GUIBuilder />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { ReactFormGenerator, ElementStore } from 'react-form-builder2';\n\nexport default class FormGenerated extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { data: [], reloaded: false };\n\n        const update = this._onChange.bind(this);\n        ElementStore.subscribe(state => update(state.data));\n    }\n    componentDidMount() {\n        if (localStorage.getItem(\"formData\")) {\n            this.setState({ data: JSON.parse(localStorage.getItem(\"formData\")) });\n        } else {\n            this.setState({ data: [] });\n        }\n    }\n    _onChange(data) {\n        this.setState({\n            data: data\n        });\n    }\n    render() {\n        var formData = this.state.data.task_data ? this.state.data.task_data : [];\n        return (\n            <div className=\"FormGenerated\">\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <ReactFormGenerator\n                            read_only={true}\n                            hide_actions={true}\n                            data={formData} />\n                    </div></div></div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg'\nimport FormGenerated from './generatedForm';\n\nfunction Form() {\n  return (\n    <div className=\"App\">\n      <FormGenerated key=\"form\"/>\n      <ParticlesBg type=\"fountain\" bg={true} />\n    </div>\n  );\n}\n\nexport default Form;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/font-awesome.min.css';\nimport '../node_modules/react-form-builder2/dist/app.css'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport Gui from './Form';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst routing = (\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/form\" component={Gui} />\n        </div>\n    </Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}