{"version":3,"sources":["toolbar.js","formBuilder.js","App.js","serviceWorker.js","index.js"],"names":["Toolbar","generateForm","props","showPreview","localStorage","clear","this","clearForm","className","style","marginRight","onClick","bind","deleteForm","React","Component","GUIBuilder","onPost","data","setItem","JSON","stringify","setState","state","previewVisible","getItem","parse","formData","task_data","builderVisible","formVisible","read_only","hide_actions","closeForm","App","type","bg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UACqBA,E,2MACjBC,aAAe,WACX,EAAKC,MAAMC,e,4EAGXC,aAAaC,QACbC,KAAKJ,MAAMK,c,+BAGX,OAAQ,6BACJ,wBAAIC,UAAU,WAAd,mBACA,yBAAKA,UAAU,WACX,4BAAQA,UAAU,0BAA0BC,MAAO,CAAEC,YAAa,QAAUC,QAASL,KAAKL,aAAaW,KAAKN,OAA5G,iBACA,4BAAQE,UAAU,0BAA0BC,MAAO,CAAEC,YAAa,QAAUC,QAASL,KAAKO,WAAWD,KAAKN,OAA1G,oB,GAbqBQ,IAAMC,WCoE5BC,E,YA/DX,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAwBVe,OAAS,SAACC,GACNd,aAAae,QAAQ,WAAYC,KAAKC,UAAUH,IAChD,EAAKI,SAAS,CAAEJ,KAAMA,KAzBtB,EAAKK,MAAQ,CACTL,KAAM,GACNM,gBAAgB,GAEpB,EAAKjB,UAAY,EAAKA,UAAUK,KAAf,gBACjB,EAAKT,YAAc,EAAKA,YAAYS,KAAjB,gBAPJ,E,iFAUXR,aAAaqB,QAAQ,YACrBnB,KAAKgB,SAAS,CAAEJ,KAAME,KAAKM,MAAMtB,aAAaqB,QAAQ,eAEtDnB,KAAKgB,SAAS,CAAEJ,KAAM,O,oCAI1BZ,KAAKgB,SAAS,CAAEE,gBAAgB,M,kCAGhClB,KAAKgB,SAAS,CAAEE,gBAAgB,M,kCAGhClB,KAAKgB,SAAS,CAAEJ,KAAM,O,+BAQtB,IAAIS,EAAWrB,KAAKiB,MAAML,KAAKU,UAAYtB,KAAKiB,MAAML,KAAKU,UAAY,GACnEC,EAAiBvB,KAAKiB,MAAMC,eAAiB,SAAW,GACxDM,EAAcxB,KAAKiB,MAAMC,eAAiB,GAAK,SAEnD,OACI,6BACI,yBAAKhB,UAAS,eAAUqB,IACpB,yBAAKrB,UAAU,WACX,kBAAC,EAAD,CAASD,UAAWD,KAAKC,UAAWJ,YAAaG,KAAKH,YAAae,KAAMZ,KAAKiB,MAAML,QAExF,yBAAKV,UAAU,eACX,kBAAC,mBAAD,CACIU,KAAMS,EACNV,OAAQX,KAAKW,WAGzB,yBAAKT,UAAS,wBAAmBsB,IAC7B,yBAAKtB,UAAU,+BACX,yBAAKA,UAAU,2BACX,kBAAC,qBAAD,CACIuB,WAAW,EACXC,cAAc,EACdd,KAAMS,IACV,4BAAQnB,UAAU,2BAA2BC,MAAO,CAAEC,YAAa,QAAUC,QAASL,KAAK2B,UAAUrB,KAAKN,OAA1G,iB,GAvDHQ,IAAMC,W,SCShBmB,MATf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAa2B,KAAK,WAAWC,IAAI,MCGnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b2a81c0.chunk.js","sourcesContent":["import React from 'react';\nexport default class Toolbar extends React.Component {\n    generateForm = () => {\n        this.props.showPreview();\n    }\n    deleteForm() {\n        localStorage.clear();\n        this.props.clearForm();\n    }\n    render() {\n        return (<div>\n            <h4 className=\"heading\">MSD GUI BUILDER</h4>\n            <div className=\"buttons\">\n                <button className=\"btn btn-primary formBtn\" style={{ marginRight: '10px' }} onClick={this.generateForm.bind(this)}>Generate Form</button>\n                <button className=\"btn btn-primary formBtn\" style={{ marginRight: '10px' }} onClick={this.deleteForm.bind(this)}>Clear Form</button>\n            </div>\n        </div>\n        );\n    }\n}\n","\nimport React from 'react'\nimport { ReactFormBuilder, ReactFormGenerator } from 'react-form-builder2';\nimport Toolbar from './toolbar'\n\nclass GUIBuilder extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: [],\n            previewVisible: false\n        };\n        this.clearForm = this.clearForm.bind(this);\n        this.showPreview = this.showPreview.bind(this);\n    }\n    componentDidMount() {\n        if (localStorage.getItem(\"formData\")) {\n            this.setState({ data: JSON.parse(localStorage.getItem(\"formData\")) });\n        } else {\n            this.setState({ data: [] });\n        }\n    }\n    showPreview() {\n        this.setState({ previewVisible: true });\n    }\n    closeForm() {\n        this.setState({ previewVisible: false });\n    }\n    clearForm() {\n        this.setState({ data: [] });\n    }\n    onPost = (data) => {\n        localStorage.setItem(\"formData\", JSON.stringify(data))\n        this.setState({ data: data });\n\n    }\n    render() {\n        var formData = this.state.data.task_data ? this.state.data.task_data : [];\n        var builderVisible = this.state.previewVisible ? 'hidden' : '';\n        var formVisible = this.state.previewVisible ? '' : 'hidden';\n\n        return (\n            <div>\n                <div className={`page ${builderVisible}`}>\n                    <div className=\"toolbar\">\n                        <Toolbar clearForm={this.clearForm} showPreview={this.showPreview} data={this.state.data} />\n                    </div>\n                    <div className=\"gui-builder\">\n                        <ReactFormBuilder\n                            data={formData}\n                            onPost={this.onPost} />\n                    </div>\n                </div>\n                <div className={`formGenerated ${formVisible}`}>\n                    <div className=\"modal-dialog form-generated\">\n                        <div className=\"modal-content generated\">\n                            <ReactFormGenerator\n                                read_only={true}\n                                hide_actions={true}\n                                data={formData} />\n                            <button className=\"btn btn-primary closeBtn\" style={{ marginRight: '10px' }} onClick={this.closeForm.bind(this)}>Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GUIBuilder;","import React from 'react';\nimport './App.css';\nimport GUIBuilder from './formBuilder';\nimport ParticlesBg from 'particles-bg'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GUIBuilder />\n      <ParticlesBg type=\"fountain\" bg={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/font-awesome.min.css';\nimport '../node_modules/react-form-builder2/dist/app.css'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}